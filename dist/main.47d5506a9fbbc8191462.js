/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./js/functions.js
var $listField = document.querySelector(".list__form input"); // Function for modifying String

var modifyString = function modifyString(str) {
  return str[0].toUpperCase() + str.slice(1).toLowerCase();
}; // Function for setting focus to list field


var listFieldFunc = function listFieldFunc() {
  $listField.value = "";
  $listField.focus();
}; // Function for storing JSON Data in localStorage


var storeJson = function storeJson(key, value) {
  return localStorage.setItem(key, JSON.stringify(value));
}; // Function for parsing JSON Data retrieved from localStorage


var parseJson = function parseJson(data) {
  return JSON.parse(localStorage.getItem(data));
};


;// CONCATENATED MODULE: ./js/main.js

 // Selectors

var main_$listField = document.querySelector(".list__form input");
var $listSubmitBtn = document.querySelector(".list__form button");
var $listContainer = document.querySelector(".list--container");
var $listTemplate = document.querySelector(".list__template");
var $itemTemplate = document.querySelector(".item__template");
var listId = 0,
    itemId = 0;
var appData = {
  list: [],
  listIds: [],
  lastItemId: 0
};
var listItemIds = new Map(); // Function for displaying list

var displayList = function displayList(list) {
  $listContainer.append($listTemplate.content.cloneNode(true));
  var $lastList = $listContainer.lastElementChild;
  $lastList.setAttribute("id", "list-".concat(list.listId));
  $lastList.querySelector("h2").innerText = list.listName;
}; // Function for displaying list's item


var displayListItem = function displayListItem(itemsContainer, item) {
  itemsContainer.append($itemTemplate.content.cloneNode(true));
  var $lastItem = itemsContainer.lastElementChild;
  $lastItem.setAttribute("id", "item-".concat(item.itemId));
  $lastItem.querySelector("p").innerText = item.itemName;
};
/*------------- Displaying list Data from localStorage on window loading -------------*/


window.addEventListener("load", function () {
  // i) Setting Focus to list Field
  listFieldFunc(); // ii) Reassigning data to variables

  var _ref = [parseJson("list"), parseJson("listItemIds")],
      listData = _ref[0],
      itemIds = _ref[1];

  if (listData && listData.listIds.length) {
    appData = listData;
    listId = listData.listIds.at(-1) + 1;
  }

  if (listData && listData.lastItemId) {
    listItemIds = new Map(Object.entries(itemIds));
    itemId = listData.lastItemId + 1;
  } // iii) Display lists & their items in UI


  if (listData && listData.list.length) {
    listData.list.forEach(function (list) {
      displayList(list);
      var $itemsWrapper = $listContainer.lastElementChild.querySelector(".items__wrapper");
      list.items.forEach(function (item) {
        displayListItem($itemsWrapper, item);
      });
    });
  }
});
/*----------------- Event Handler for list input button -------------------*/

$listSubmitBtn.addEventListener("click", function (e) {
  // 1) Prevent Default Behavior
  e.preventDefault(); // 2) Get the list name

  var listName = main_$listField.value.trim(); // 3) Check for truthy value of listName

  if (listName && listName.length <= 20) {
    // i) Modify List Name
    listName = modifyString(listName); // iii) Store list index in appData.listIds array

    appData.listIds.push(listId); // ii) Store list in local Storage & also in appData.list array

    appData.list.push({
      listId: listId,
      listName: listName,
      items: []
    });
    storeJson("list", appData); // iii) Empty input field

    listFieldFunc(); // iv) Display List in UI

    displayList({
      listId: listId,
      listName: listName
    }); // v) Increase listId by 1

    listId++;
  }
});
/*----------- EventHandler for List Container When list is deleted -----------*/

$listContainer.addEventListener("click", function (e) {
  if (e.target.matches(".bx-trash")) {
    // i) Get the listId
    var _listId = +e.target.closest(".list").id.split("-")[1]; // ii) Find Index of the list


    var listIndex = appData.listIds.indexOf(_listId); // iii) Remove listId, listItems Ids & list from appData Object

    appData.listIds.splice(listIndex, 1);
    listItemIds["delete"](String(_listId));
    appData.list.splice(listIndex, 1); // iv) Update localStorage

    storeJson("list", appData);
    storeJson("listItemIds", Object.fromEntries(listItemIds)); // v) Update UI

    e.target.closest(".list").remove();
  }
});
/*----------- EventHandler for List Container When new item is added -----------*/

$listContainer.addEventListener("click", function (e) {
  var _e$target$previousEle, _e$target$previousEle2;

  var $itemInputField = e.target.previousElementSibling;
  var itemName = (_e$target$previousEle = e.target.previousElementSibling) === null || _e$target$previousEle === void 0 ? void 0 : (_e$target$previousEle2 = _e$target$previousEle.value) === null || _e$target$previousEle2 === void 0 ? void 0 : _e$target$previousEle2.trim(); // Check if item add button is clicked & itemName is truthy

  if (e.target.matches(".btn__item--add") && itemName && itemName.length <= 30) {
    // i) Modify itemName
    itemName = modifyString(itemName); // ii)  Get list id

    var itemsListId = e.target.closest(".list").id.split("-")[1]; // iii) Store itemId in listItemIds map & in localStorage

    listItemIds.has(itemsListId) ? listItemIds.get(itemsListId).push(itemId) : listItemIds.set(itemsListId, []).get(itemsListId).push(itemId);
    storeJson("listItemIds", Object.fromEntries(listItemIds)); // iv) Store item in localStorage & appData.list array both

    var listIndex = appData.listIds.indexOf(+itemsListId);
    appData.list[listIndex].items.push({
      itemId: itemId,
      itemName: itemName
    });
    appData.lastItemId = itemId;
    storeJson("list", appData); // v) Empty item Input Field & set the focus

    $itemInputField.value = "";
    $itemInputField.focus(); // vi) Display item in UI

    var $itemsContainer = e.target.closest(".item__form").nextElementSibling;
    displayListItem($itemsContainer, {
      itemId: itemId,
      itemName: itemName
    }); // vii) Increase item id by 1

    itemId++;
  }
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,